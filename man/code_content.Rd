% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/code_content.R
\name{code_content}
\alias{code_content}
\title{Code Text Content Using an API and a Codebook}
\usage{
code_content(
  x,
  general_instructions,
  formatting_instructions,
  codebook,
  provider = "openai",
  model = NULL,
  temperature = 0,
  sleep = 0,
  drop_json = TRUE,
  drop_instructions = TRUE,
  keep_all_original_rows = TRUE
)
}
\arguments{
\item{x}{data.frame. Input data containing at least a 'text' column with the
texts to be coded.}

\item{general_instructions}{character. General instructions for the coding task
provided to the language model.}

\item{formatting_instructions}{character. Specific instructions for the model
on how to format its JSON output.}

\item{codebook}{data.frame. A data frame representing the codebook.}

\item{provider}{character. The API used. Must be "claude", "gemini", "openai", 
"ollama", "chatai", "blablador" or "openwebui.}

\item{model}{character. The identifier of the model to use.}

\item{temperature}{numeric. The sampling temperature (0 for deterministic output).}

\item{sleep}{Seconds to pause between API calls to avoid rate limits.}

\item{drop_json}{logical. If TRUE, removes the raw JSON response column from
the final output.}

\item{drop_instructions}{logical. If TRUE, removes the 'instructions' column
(if present in the parsed results) from the final output.}

\item{keep_all_original_rows}{logical. If TRUE (default), the output includes
all rows from the original input data frame \code{x}, with NA values in coded
columns for rows that failed processing. If FALSE, only rows that were
successfully coded and parsed are returned.}
}
\value{
A data.frame combining the original data (or a subset based on
\code{keep_all_original_rows}) with the parsed coding results from the API.
Each coded category typically results in a separate row if multiple
categories are defined in the codebook.
}
\description{
Iterates through rows of a data frame containing text, sends each text along
with instructions and a codebook to the API for classification/coding,
parses the JSON responses, and joins the results back to the original data.
}
\details{
This function relies on external API calls and, hence, requires the 
\code{OPENAI_API_KEY}, \code{GOOGLE_API_KEY}, \code{ANTHROPIC_API_KEY},
\code{CHATAI_API_KEY}, \code{BLABLADOR_API_KEY}, or \code{OPENWEBUI_API_KEY}
environment variables to be set. For ollama, no API key is required, 
but ollama must be installed. The structure of the expected JSON response from
the API should align with the \code{formatting_instructions} provided and the 
parsing logic within this function.
}
\examples{
\dontrun{
# Requires API key to be set in environment variable
data_to_code <- data.frame(text = c("It is terrible what is happening to this country", 
"The movie was awesome.", 
"The stock market has falled dramatically because of the governments' ruinous fiscal policies", 
"The situation has been calm following the recent local elections"))
general_instructions <- "You are a highly accurate and consistent text classification model that specializes in analyzing English-language Twitter posts. Your task is to determine the sentiment of the tweet reproduced below. You must strictly follow the classification rules without deviation. Do not return any additional information outside the classification scheme. Use JSON."
formatting_instructions <- "Always return a single JSON object for each coded text with the category name as the key. The value should be an object containing a 'label' key and a single value among multiple options. Each JSON object should have the following structure:"
codebook <- data.frame(category = c("sentiment", "sentiment", "sentiment"), 
                       label = c("positive", "negative", "neutral"), 
                       instructions = c("Code this if the sentiment of the tweet is positive", "Code this if the sentiment of the tweet is negative", "Code this if the sentiment of the tweet is neutral"))

coded_results <- code_content(
  x = data_to_code,
  general_instructions = general_instructions,
  formatting_instructions = formatting_instructions,
  codebook = codebook
)

print(head(coded_results))
}
}
